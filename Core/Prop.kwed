use { Super.{Eq.Eq, False.{False, Not}, Map.{POINTWISE, IsInjective}, Logic, Product.Product} }

// Uniqueness means specifically that any two elements of a type are equal. This *does not* imply
// that the type is inhabited; see False.unique.
def Is-Unique(A: Type): Type {
    (x y: A) → Eq A x y
}

def dependent-map-to-unique-is-unique(
    A: Type,
    B: A → Type,
    B-is-unique: (x: A) → Is-Unique (B x)
): Is-Unique ((x: A) → B x) {
    [f g: (x: A) → B x] POINTWISE A B f g ([x: A] B-is-unique (f x) (g x))
}

def map-to-unique-is-unique(A B: Type, B-is-unique: Is-Unique B): Is-Unique (A → B) {
    dependent-map-to-unique-is-unique A ([A] B) ([A] B-is-unique)
}

struct Prop: Type {
    Ty: Type,
    Ty-is-unique: Is-Unique Ty,
}

// Takes a type and turns it into a mere proposition which contains only the data of whether the
// type is inhabited or not, forgetting all other internal structure.
def Merely(A: Type): Type {
    Not (Not A)
}

def Merely.make(A: Type, a: A): Merely A {
    Logic.double-neg A a
}

def Merely.is-unique(A: Type): Is-Unique (Merely A) {
    map-to-unique-is-unique (Not A) False False.is-unique
}

def Forall(A: Type, B: A → Type): Type {
    Merely ((a: A) → B a)
}

def Forall.make(A: Type, B: A → Type, f: (a: A) → B a): Forall A B {
    Merely.make (Forall A B) f
}

def ∀(A: Type, B: A → Type): Type {
    Forall A B
}

def Exists(A: Type, B: A → Type): Type {
    Merely (Product A B)
}

def Exists.make(A: Type, B: A → Type, a: A, b: B a): Exists A B {
    Merely.make (Exists A B) (Product.make A B a b)
}

def ∃(A: Type, B: A → Type): Prop { Exists A B }

// -------------------------------------------------------------------------------------------------

struct Subset(A: Type): Type {
    In: A → Type,
    In-is-unique: (a: A) → Is-Unique (In a),
}

def Subset.∈(A: Type, P: Subset A): A → Type {
    Subset.In A P
}

struct Subset-Elem(A: Type, P: Subset A): Type {
    inner: A,
    inner-in-subset: (Subset.In A P),
}

// def Subset.inner.is-injective(A: Type, P: Subset A): IsInjective (SubtypeElem.inner A P) {
//     [x y: SubtypeElem A P, x≠y: Not (Eq (SubtypeElem A P) x y)] (
//         [xi=yi: Eq A (SubtypeElem.inner x) (SubtypeElem.inner y)]
//             todo
//     )
// }
