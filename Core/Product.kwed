use { Super.{Eq.Eq, Prop.Prop, Map.IsInjective, Eq} }

// Dependent product of a base type and a family over the base
struct Product(A: Type, B: A → Type): Type {
    first: A,
    second: B first,
}

def Product.Second-Ty(A: Type, B: A → Type, p: Product A B): Type {
    B (Product.first A B p)
}

// -------------------------------------------------------------------------------------------------
// HoTT Theorem 2.7.2

def Product-Of-Eqs(
    A: Type,
    B: A → Type,
    p0 p1: Product A B,
): Type {
    Product
        // the first element is a path from `first p0` to `first p1`
        (Eq A (Product.first A B p0) (Product.first A B p1)) 
        // the second element is a path from `second p0` to `second p1` lying over the first path.
        ([p: (Eq A (Product.first A B p0) (Product.first A B p1))] 
            Eq (Product.Second-Ty A B p1)
                // we express this by transporting `second p0` along the first path before
                // constructing the equality type.
                (Eq.transport A B 
                    (Product.first A B p0) (Product.first A B p1) (Product.second A B p0)
                )
                (Product.second A B p1)
        )
}

def Product.eq-of-products→product-of-eqs(
    A: Type,
    B: A → Type,
    p0 p1: Product A B,
    p0=p1: Eq (Pair A B) p0 p1
): Product-Of-Eqs A B p0 p1
{
    match p0=p1 to [p1* -] Product-Of-Eqs A B p0 p1* {
        refl => Product.make (
            first: Eq.refl A (Product.first A B p0),
            second: Eq.refl (Product.Second-Ty A B p0) (Product.second A B p0),
        ),
    }
}

// -------------------------------------------------------------------------------------------------
// Non-dependent pairs

// (Cartesian product) Type of pairs of elements from A and B
def Pair(A B: Type): Type {
    Product A ([-: A] B)
}

def Pair.make(A B: Type, a: A, b: B): Pair A B {
    Product.make A ([-: A] B) a b
}

def Pair.uncurry(A B C: Type, f: (a: A, b: B) → C, pair: Pair A B): C {
    match pair to [-] C {
        pair a b => f a b,
    } 
}

def Pair.first(A B: Type, ): (Pair A B) → A {
    Product.first A ([-: A] B)
}

def Pair.second(A B: Type, ): (Pair A B) → B {
    Product.second A ([-: A] B)
}

def Pair.is-doubleton(A: Type, pair: Pair A A): Prop {
    Eq A (Pair.first pair) (Pair.second pair)
}

def Pair.doubleton(A: Type, a: A): Pair A A {
    Pair.make a a
}

// def Pair.doubleton.is-injective(A: Type): IsInjective A (Pair A A) (Pair.doubleton A) {
//     todo
// }
